Object subclass: #ClassGenerator	instanceVariableNames: 'aux'	classVariableNames: ''	package: 'ClassGenerator-v0'!!ClassGenerator commentStamp: 'TomasBascal 4/12/2022 17:51' prior: 0!ClassGenerator -------------------------------------------------------Es una clase dónde nos permite crear nuestras clases básicas yahorrar tiempo cuando queremos construir clases u objetos dentro de Smalltalk.-------------------------------------------------------TUTORIAL:1) Copiar esto en el playground:|constructor parametros final|Transcript clear.constructor := ClassGenerator create.parametros:= #(a b c d).final := constructor generateClassicConstructorMethod: parametros.final do: [ :a| Transcript show: a;cr . ].2) Remplazar "parametros" por el arreglo que desean y ejecutan.3) Luego copian y pegan los "methods" según correspondan.Con esto se acaba el tutorial, gracias por usarlo y seguíme en:GitHub -> github.com/TomatoTokLinkedIn -> linkedin.com/in/tomas-bascal-----------------------------------------------------------------------Esta clase es de uso libre y práctico, no está pensada para ser utilizada en exámenes (finales,parciales) o instancias evaluativas.!!ClassGenerator methodsFor: 'generateMethods' stamp: 'TomasBascal 4/6/2022 21:35'!generateInstanceMethod: params params: collection	| str1 str2 final |	str1 := 'init' , params.	str2 := ''.	collection do: [ :a | str2 := str2 , a , ':=x' , a , '. ' , '\' ].	str2 := str2 withCRs.	final := OrderedCollection new.	final		add: str1;		add: str2.	^ final! !!ClassGenerator methodsFor: 'generateMethods' stamp: 'TomasBascal 4/12/2022 17:31'!generateClassicConstructorMethod: collection	| structure str1 str2 str3 str4 str5 str6 str7 str8 str9 str10 str11|	structure := OrderedCollection new.	str1 := self params: collection. "String"	str2 := self generateInstanceMethod: str1 params: collection. "Collection"	str3 := self generateClassMethod: str1. "Collection"	str4 := self simpleLine. "String"	str5 := self instanceLine. "String"	str6 := self classLine. "String"	str7 := self classicConstructorLine. "String"	str8 := self simpleSpacedLine.	str9 := self variables: collection.	str10 := self variablesLine.	str11 := self watermarkLine.	structure		add: str4;"simple line"		add: str7;"Constructor clasico"		add: str4;"simple line"		add: str4;"simple line"		add: str10;"variable line"		add: str9;"variables"		add: str8;"simple spaced line"		add: str4;"simple line"		add: str8;"spaced line"		add: str5;"Instance line"		add: str8."simple spaced line"	structure addAll: str2.	structure		add: str4;		add: str8;		add: str6;		add: str8.	structure addAll: str3.	structure		add: str4;		add: str11.	^ structure! !!ClassGenerator methodsFor: 'generateMethods' stamp: 'TomasBascal 4/6/2022 20:49'!generateClassMethod: params	| str1 str2 str3 str4 str5 final |	str1 := 'create' , params. 	str2 := '|elem|'.	str3 := 'elem := self new.'.	str4 := 'elem init',params,'.'.	str5 := '^elem.'.	final := OrderedCollection new.	final		add: str1;add: str2;add: str3;add: str4;		add: str5.	^ final! !!ClassGenerator methodsFor: 'lines' stamp: 'TomasBascal 4/12/2022 17:10'!classicConstructorLine^'==		Constructor clasico de Instancia y Clase		=='! !!ClassGenerator methodsFor: 'lines' stamp: 'TomasBascal 4/6/2022 21:28'!simpleLine	^ '================================================='! !!ClassGenerator methodsFor: 'lines' stamp: 'TomasBascal 4/6/2022 21:27'!simpleSpacedLine	^ '==                                             =='! !!ClassGenerator methodsFor: 'lines' stamp: 'TomasBascal 4/6/2022 21:28'!classLine	^ '=============     CLASS METHOD     =============='! !!ClassGenerator methodsFor: 'lines' stamp: 'TomasBascal 4/12/2022 17:53'!watermarkLine"Esto esta para fantasmear nomas jajaj, tenes mi permiso para borrarla ( uwu)"^'powerBy: Tomas Bascal.'! !!ClassGenerator methodsFor: 'lines' stamp: 'TomasBascal 4/6/2022 21:29'!instanceLine	^ '============     INSTANCE METHOD     ============='! !!ClassGenerator methodsFor: 'lines' stamp: 'TomasBascal 4/12/2022 17:22'!variablesLine^'==							    Variables    						=='! !!ClassGenerator methodsFor: 'parameters' stamp: 'TomasBascal 4/6/2022 20:30'!params: aParams	| str1 |	str1 := ''.	aParams do: [ :a | 		str1 := str1 , 'X' , a , ':x' , a , ' '. ].	^ str1! !!ClassGenerator methodsFor: 'accessing' stamp: 'TomasBascal 4/12/2022 17:21'!variables:collection|elem|elem := ''. collection do: [ :a| elem := elem,' ',a. ].^elem.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ClassGenerator class	instanceVariableNames: ''!!ClassGenerator class methodsFor: 'operations' stamp: 'TomasBascal 4/6/2022 20:12'!create|elem|elem:= self new.^elem.! !